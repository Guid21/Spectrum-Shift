// Localization system for Color2048 Game
class Localization {
    constructor() {
        this.currentLanguage = 'en';
        this.translations = {
            'en': {
                // Game UI
                'score': 'SCORE',
                'best': 'BEST',
                'gameOver': 'Game Over!',
                'tryAgain': 'Try Again',
                'newGame': 'üéÆ New Game',
                'menu': 'Menu',
                'shop': 'Shop',
                'faq': '‚ùì FAQ',
                'discoveredColors': 'Discovered Colors',
                'leaderboard': 'üèÜ Leaderboard',
                'watchAdTitle': 'Free Gems',
                'watchAdDesc': 'Watch an ad to get 50 free gems',
                'watchAdButton': 'Watch Ad',
                'leaderboardTitle': 'üèÜ Top Players',
                'yourRank': 'Your rank',
                'loading': 'Loading...',
                'noData': 'No data available',
                'place': 'Place',
                'player': 'Player',
                'score': 'Score',
                'you': 'You',

                // Shop
                'extraUndo': 'Extra Undo',
                'extraUndoDesc': 'Increase max undo count by 1 (Very valuable!)',
                'rainbowBoost': 'Rainbow Boost',
                'rainbowBoostDesc': 'Increase rainbow tile chance by 3% (Luxury upgrade)',
                'gridUpgrade': 'Grid Upgrade',
                'gridUpgradeDesc': 'Upgrade grid from 4x4 to 5x5 (Game changer!)',
                'buy': 'Buy',

                // Abilities
                'blast': 'BLAST',
                'blastDesc': 'Destroy groups of same-colored tiles',
                'perUse': 'per use',
                'costIncreases': 'Cost increases with score',
                'undo': 'UNDO',

                // FAQ
                'gameGuideTitle': '‚ùì Game Guide & FAQ',
                'mainGameGoal': 'üéØ Main Game Goal',
                'mainGameGoalDesc': 'Combine tiles of the same color to create new colors and score points. The goal is to reach the highest color levels and achieve the maximum score!',
                'colorSystem': 'üé® Color System (12 Levels)',
                'colorSystemDesc': `<strong>Color Levels:</strong><br>
                    1. Coral Red (2 points)<br>
                    2. Sunset Orange (4 points)<br>
                    3. Golden Yellow (8 points)<br>
                    4. Lime Green (16 points)<br>
                    5. Emerald (32 points)<br>
                    6. Turquoise (64 points)<br>
                    7. Sky Blue (128 points)<br>
                    8. Royal Blue (256 points)<br>
                    9. Deep Purple (512 points)<br>
                    10. Violet (1024 points)<br>
                    11. Rose Pink (2048 points)<br>
                    12. Sunset Gold (4096 points)`,
                'currencySystem': 'üíé Currency System (Gems)',
                'currencySystemDesc': 'Gems are earned when merging tiles. The amount depends on the tile level. Use gems in the shop to purchase upgrades. <strong>Important:</strong> rewards decrease as score increases to create difficulty.',
                'rainbowTiles': 'üåà Rainbow Tiles',
                'rainbowTilesDesc': 'Rare tiles with an iridescent background. Can merge with any regular tile. Base spawn chance is 1% (can be increased in the shop). When merging two rainbow tiles, a rainbow tile of the highest level is created.',
                'blastAbility': 'üí• "Blast" Ability',
                'blastAbilityDesc': `<strong>Unlock:</strong> When reaching the 6th color level.<br>
                    <strong>How it works:</strong> Destroys groups of adjacent tiles of the same color.<br>
                    <strong>Cost:</strong> 8üíé + increases with score.<br>
                    <strong>Cooldown:</strong> 8 seconds + increases with score.`,
                'undoAbility': '‚Ü∂ "Undo" Ability',
                'undoAbilityDesc': 'Not available by default - must be purchased in the shop. Allows you to undo the last move. Number of uses is limited and resets when starting a new game.',
                'blockers': '‚úñÔ∏è Blockers (Obstacles)',
                'blockersDesc': 'Appear after 100 points with a 15% probability. Gray tiles with a red X that cannot be merged. Create additional challenge. Can only be destroyed with the Blast ability.',
                'shopUpgrades': 'üõí Shop and Upgrades',
                'shopUpgradesDesc': `<strong>Extra Undo:</strong> +1 undo (25üíé + increases with purchases)<br>
                    <strong>Rainbow Boost:</strong> +3% rainbow tile chance (40üíé + increases)<br>
                    <strong>Grid Upgrade:</strong> Upgrade grid from 4x4 to 5x5 (100üíé, one-time)`,
                'controls': 'üéÆ Controls',
                'controlsDesc': `<strong>Desktop:</strong> Arrow keys<br>
                    <strong>Mobile:</strong> Swipe on screen<br>
                    <strong>Blast mode:</strong> Click on tile to blast<br>
                    All tiles move in the selected direction until they stop.`,
                'gameInfo': 'üìã Game Information',
                'gameInfoDesc': `<strong>Difficulty:</strong> As score increases, ability costs rise, and gem rewards decrease.<br>
                    <strong>Best Score:</strong> Saved between sessions.`
            },
            'ru': {
                // Game UI
                'score': '–û–ß–ö–ò',
                'best': '–õ–£–ß–®–ò–ï',
                'gameOver': '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!',
                'tryAgain': '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                'newGame': 'üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞',
                'menu': '–ú–µ–Ω—é',
                'shop': '–ú–∞–≥–∞–∑–∏–Ω',
                'faq': '‚ùì –°–ø—Ä–∞–≤–∫–∞',
                'discoveredColors': '–û—Ç–∫—Ä—ã—Ç—ã–µ —Ü–≤–µ—Ç–∞',
                'leaderboard': 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥',
                'watchAdTitle': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã',
                'watchAdDesc': '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –∏ –ø–æ–ª—É—á–∏—Ç–µ 50 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤',
                'watchAdButton': '–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É',
                'leaderboardTitle': 'üèÜ –õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏',
                'yourRank': '–í–∞—à–µ –º–µ—Å—Ç–æ',
                'loading': '–ó–∞–≥—Ä—É–∑–∫–∞...',
                'noData': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'place': '–ú–µ—Å—Ç–æ',
                'player': '–ò–≥—Ä–æ–∫',
                'score': '–°—á—ë—Ç',
                'you': '–í—ã',

                // Shop
                'extraUndo': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞',
                'extraUndoDesc': '–£–≤–µ–ª–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω –Ω–∞ 1 (–û—á–µ–Ω—å —Ü–µ–Ω–Ω–æ!)',
                'rainbowBoost': '–†–∞–¥—É–∂–Ω—ã–π –±—É—Å—Ç',
                'rainbowBoostDesc': '–£–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å —Ä–∞–¥—É–∂–Ω–æ–π –ø–ª–∏—Ç–∫–∏ –Ω–∞ 3% (–ü—Ä–µ–º–∏—É–º —É–ª—É—á—à–µ–Ω–∏–µ)',
                'gridUpgrade': '–£–ª—É—á—à–µ–Ω–∏–µ —Å–µ—Ç–∫–∏',
                'gridUpgradeDesc': '–£–≤–µ–ª–∏—á–∏—Ç—å —Å–µ—Ç–∫—É —Å 4x4 –¥–æ 5x5 (–ú–µ–Ω—è–µ—Ç –∏–≥—Ä—É!)',
                'buy': '–ö—É–ø–∏—Ç—å',

                // Abilities
                'blast': '–í–ó–†–´–í',
                'blastDesc': '–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≥—Ä—É–ø–ø—ã –ø–ª–∏—Ç–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞',
                'perUse': '–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
                'costIncreases': '–°—Ç–æ–∏–º–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –æ—á–∫–∞–º–∏',
                'undo': '–û–¢–ú–ï–ù–ê',

                // FAQ
                'gameGuideTitle': '‚ùì –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏–≥—Ä—ã –∏ FAQ',
                'mainGameGoal': 'üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∏–≥—Ä—ã',
                'mainGameGoalDesc': '–°–æ–µ–¥–∏–Ω—è–π—Ç–µ –ø–ª–∏—Ç–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –∏ –Ω–∞–±–∏—Ä–∞—Ç—å –æ—á–∫–∏. –¶–µ–ª—å - –¥–æ—Å—Ç–∏—á—å –≤—ã—Å—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π —Ü–≤–µ—Ç–æ–≤ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞!',
                'colorSystem': 'üé® –°–∏—Å—Ç–µ–º–∞ —Ü–≤–µ—Ç–æ–≤ (12 —É—Ä–æ–≤–Ω–µ–π)',
                'colorSystemDesc': `<strong>–£—Ä–æ–≤–Ω–∏ —Ü–≤–µ—Ç–æ–≤:</strong><br>
                    1. –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π –∫—Ä–∞—Å–Ω—ã–π (2 –æ—á–∫–∞)<br>
                    2. –ó–∞–∫–∞—Ç–Ω—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π (4 –æ—á–∫–∞)<br>
                    3. –ó–æ–ª–æ—Ç–∏—Å—Ç–æ-–∂—ë–ª—Ç—ã–π (8 –æ—á–∫–æ–≤)<br>
                    4. –õ–∞–π–º–æ–≤—ã–π –∑–µ–ª—ë–Ω—ã–π (16 –æ—á–∫–æ–≤)<br>
                    5. –ò–∑—É–º—Ä—É–¥–Ω—ã–π (32 –æ—á–∫–∞)<br>
                    6. –ë–∏—Ä—é–∑–æ–≤—ã–π (64 –æ—á–∫–∞)<br>
                    7. –ù–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π (128 –æ—á–∫–æ–≤)<br>
                    8. –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Å–∏–Ω–∏–π (256 –æ—á–∫–æ–≤)<br>
                    9. –¢—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π (512 –æ—á–∫–æ–≤)<br>
                    10. –§–∏–æ–ª–µ—Ç–æ–≤—ã–π (1024 –æ—á–∫–∞)<br>
                    11. –†–æ–∑–æ–≤—ã–π (2048 –æ—á–∫–æ–≤)<br>
                    12. –ó–∞–∫–∞—Ç–Ω–æ–µ –∑–æ–ª–æ—Ç–æ (4096 –æ—á–∫–æ–≤)`,
                'currencySystem': 'üíé –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª—é—Ç—ã (–ö—Ä–∏—Å—Ç–∞–ª–ª—ã)',
                'currencySystemDesc': '–ö—Ä–∏—Å—Ç–∞–ª–ª—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –ø–ª–∏—Ç–æ–∫. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –ø–ª–∏—Ç–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π. <strong>–í–∞–∂–Ω–æ:</strong> –Ω–∞–≥—Ä–∞–¥—ã —É–º–µ–Ω—å—à–∞—é—Ç—Å—è —Å —Ä–æ—Å—Ç–æ–º –æ—á–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.',
                'rainbowTiles': 'üåà –†–∞–¥—É–∂–Ω—ã–µ –ø–ª–∏—Ç–∫–∏',
                'rainbowTilesDesc': '–†–µ–¥–∫–∏–µ –ø–ª–∏—Ç–∫–∏ —Å –ø–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–º—Å—è —Ñ–æ–Ω–æ–º. –ú–æ–≥—É—Ç —Å–ª–∏–≤–∞—Ç—å—Å—è —Å –ª—é–±–æ–π –æ–±—ã—á–Ω–æ–π –ø–ª–∏—Ç–∫–æ–π. –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è 1% (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ). –ü—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –¥–≤—É—Ö —Ä–∞–¥—É–∂–Ω—ã—Ö –ø–ª–∏—Ç–æ–∫ —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ä–∞–¥—É–∂–Ω–∞—è –ø–ª–∏—Ç–∫–∞ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.',
                'blastAbility': 'üí• –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å "–í–∑—Ä—ã–≤"',
                'blastAbilityDesc': `<strong>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞:</strong> –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 6-–≥–æ —É—Ä–æ–≤–Ω—è —Ü–≤–µ—Ç–∞.<br>
                    <strong>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong> –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –≥—Ä—É–ø–ø—ã —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–ª–∏—Ç–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞.<br>
                    <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> 8üíé + —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –æ—á–∫–∞–º–∏.<br>
                    <strong>–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞:</strong> 8 —Å–µ–∫—É–Ω–¥ + —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –æ—á–∫–∞–º–∏.`,
                'undoAbility': '‚Ü∂ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å "–û—Ç–º–µ–Ω–∞"',
                'undoAbilityDesc': '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—É–ø–ª–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ. –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.',
                'blockers': '‚úñÔ∏è –ë–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∏ (–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è)',
                'blockersDesc': '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ 100 –æ—á–∫–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 15%. –°–µ—Ä—ã–µ –ø–ª–∏—Ç–∫–∏ —Å –∫—Ä–∞—Å–Ω—ã–º X, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —Å–ª–∏—Ç—å. –°–æ–∑–¥–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –ú–æ–≥—É—Ç –±—ã—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –í–∑—Ä—ã–≤.',
                'shopUpgrades': 'üõí –ú–∞–≥–∞–∑–∏–Ω –∏ —É–ª—É—á—à–µ–Ω–∏—è',
                'shopUpgradesDesc': `<strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞:</strong> +1 –æ—Ç–º–µ–Ω–∞ (25üíé + —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –ø–æ–∫—É–ø–∫–∞–º–∏)<br>
                    <strong>–†–∞–¥—É–∂–Ω—ã–π –±—É—Å—Ç:</strong> +3% —à–∞–Ω—Å —Ä–∞–¥—É–∂–Ω–æ–π –ø–ª–∏—Ç–∫–∏ (40üíé + —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è)<br>
                    <strong>–£–ª—É—á—à–µ–Ω–∏–µ —Å–µ—Ç–∫–∏:</strong> –£–≤–µ–ª–∏—á–∏—Ç—å —Å–µ—Ç–∫—É —Å 4x4 –¥–æ 5x5 (100üíé, –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)`,
                'controls': 'üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                'controlsDesc': `<strong>–ö–æ–º–ø—å—é—Ç–µ—Ä:</strong> –°—Ç—Ä–µ–ª–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ<br>
                    <strong>–ú–æ–±–∏–ª—å–Ω—ã–π:</strong> –°–≤–∞–π–ø –ø–æ —ç–∫—Ä–∞–Ω—É<br>
                    <strong>–†–µ–∂–∏–º –≤–∑—Ä—ã–≤–∞:</strong> –ö–ª–∏–∫ –ø–æ –ø–ª–∏—Ç–∫–µ –¥–ª—è –≤–∑—Ä—ã–≤–∞<br>
                    –í—Å–µ –ø–ª–∏—Ç–∫–∏ –¥–≤–∏–≥–∞—é—Ç—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.`,
                'gameInfo': 'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ',
                'gameInfoDesc': `<strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> –° —Ä–æ—Å—Ç–æ–º –æ—á–∫–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —Ä–∞—Å—Ç—ë—Ç, –∞ –Ω–∞–≥—Ä–∞–¥—ã –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è.<br>
                    <strong>–õ—É—á—à–∏–π —Å—á—ë—Ç:</strong> –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Å–µ–∞–Ω—Å–∞–º–∏.`
            }
        };

        // Load language from localStorage or default to browser language
        const savedLanguage = localStorage.getItem('gameLanguage');
        const browserLanguage = navigator.language.split('-')[0];

        if (savedLanguage && this.translations[savedLanguage]) {
            this.currentLanguage = savedLanguage;
        } else if (this.translations[browserLanguage]) {
            this.currentLanguage = browserLanguage;
        }
    }

    // Get translation for a key
    t(key) {
        return this.translations[this.currentLanguage][key] || this.translations['en'][key] || key;
    }

    // Set current language
    setLanguage(language) {
        if (this.translations[language]) {
            this.currentLanguage = language;
            localStorage.setItem('gameLanguage', language);
            this.updateUI();
        }
    }

    // Get current language
    getCurrentLanguage() {
        return this.currentLanguage;
    }

    // Get available languages
    getAvailableLanguages() {
        return Object.keys(this.translations);
    }

    // Update all UI elements with current language
    updateUI() {
        // Update static text elements
        const textElements = {
            'score-label': this.t('score'),
            'best-label': this.t('best'),
            'game-over-message': this.t('gameOver'),
            'try-again': this.t('tryAgain'),
            'new-game': this.t('newGame'),
            'menu-title': this.t('menu'),
            'shop-title': this.t('shop'),
            'faq-button': this.t('faq'),
            'achievement-title': this.t('discoveredColors'),
            'faq-modal-title': this.t('gameGuideTitle')
        };

        // Update elements that exist
        Object.keys(textElements).forEach(id => {
            const element = document.getElementById(id) || document.querySelector(`.${id}`);
            if (element) {
                element.textContent = textElements[id];
            }
        });

        // Update FAQ content
        this.updateFAQContent();

        // Trigger game update if game instance exists
        if (window.game) {
            window.game.updateLocalization();
        }
    }

    // Update FAQ modal content
    updateFAQContent() {
        const faqItems = [
            { key: 'mainGameGoal', descKey: 'mainGameGoalDesc' },
            { key: 'colorSystem', descKey: 'colorSystemDesc' },
            { key: 'currencySystem', descKey: 'currencySystemDesc' },
            { key: 'rainbowTiles', descKey: 'rainbowTilesDesc' },
            { key: 'blastAbility', descKey: 'blastAbilityDesc' },
            { key: 'undoAbility', descKey: 'undoAbilityDesc' },
            { key: 'blockers', descKey: 'blockersDesc' },
            { key: 'shopUpgrades', descKey: 'shopUpgradesDesc' },
            { key: 'controls', descKey: 'controlsDesc' },
            { key: 'gameInfo', descKey: 'gameInfoDesc' }
        ];

        const faqContainer = document.getElementById('faq-container');
        if (faqContainer) {
            const faqElements = faqContainer.querySelectorAll('.faq-item');
            faqElements.forEach((item, index) => {
                if (faqItems[index]) {
                    const question = item.querySelector('.faq-question span:first-child');
                    const answer = item.querySelector('.faq-answer');
                    if (question) question.innerHTML = this.t(faqItems[index].key);
                    if (answer) answer.innerHTML = this.t(faqItems[index].descKey);
                }
            });
        }
    }
}

// Create global localization instance
window.localization = new Localization(); 